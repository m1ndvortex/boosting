name: Deploy to VPS

on:
  push:
    branches:
      - main  # Deploy when pushing to main branch
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: gaming-marketplace/package-lock.json

      - name: Install dependencies
        run: |
          cd gaming-marketplace
          npm ci

      - name: Build project
        run: |
          cd gaming-marketplace
          npm run build

      - name: Create deployment package
        run: |
          cd gaming-marketplace
          tar -czf ../deploy.tar.gz dist/ package.json package-lock.json nginx.conf vps-deploy.sh

      - name: Deploy to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "deploy.tar.gz"
          target: "/tmp/"

      - name: Execute deployment script on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Create deployment directory if it doesn't exist
            sudo mkdir -p /var/www/gaming-marketplace
            
            # Extract deployment package
            cd /tmp
            sudo tar -xzf deploy.tar.gz -C /var/www/gaming-marketplace
            
            # Set permissions
            sudo chown -R www-data:www-data /var/www/gaming-marketplace
            
            # Install production dependencies if needed
            cd /var/www/gaming-marketplace
            if [ -f "package.json" ]; then
              npm ci --production
            fi
            
            # Reload Nginx
            sudo nginx -t && sudo systemctl reload nginx
            
            # Cleanup
            rm -f /tmp/deploy.tar.gz
            
            echo "âœ… Deployment completed successfully!"
